#!/usr/bin/env bash
set -e

# change these settings to a more suitable form
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
FILE_BASE=$( cd "${DIR}/../share/vboxtools" && pwd )
CONFIG_BASE=$( cd "${DIR}/../share/config/vboxtools" && pwd )

info () {
    if [ ! -z ${VBOX_DEBUG} ]; then
        echo $@ >&2
    fi
}

warn () {
    echo $@ >&2
}

die () {
    warn $@
    exit 1
}

warn_invalid_vm () {
    warn "'${1}' is not a registered machine"
}

sourceconfigs () {
    VBOX_FILE_BASE="${FILE_BASE}"
    VBOX_CONFIG_BASE="${CONFIG_BASE}"

    for name in $@; do
        config="${CONFIG_BASE}/${name}"
        if [ ! -f "${config}" ]; then
            warn "configfile '${config}' not found"
            return 1
        fi
        source $config
    done
}

checkenv () {
    for name in $@; do
        if [ -z "${!name}" ]; then
            warn "'${name}' is undefined"
            return 1
        fi
    done
}

checkenvfile () {
    checkenv $@ || return 1
    for name in $@; do
        if [ ! -f "${!name}" ]; then
            warn "'${!name}' is missing in working directory; aborting"
            return 1
        fi
    done
}

putscancode () {
    echo $@ | $DIR/../bin/scancode.py
}

runscancode () {
    target=${2:-${VBOX_NAME}}
    default=${VBOX_SCANCODE_LIMIT-10}
    limit=${3-$default}
    putscancode $1 | xargs -n $limit \
        VBoxManage controlvm "${target}" keyboardputscancode
}

set_vm_mac_ip () {
    name="$1"
    net="$2"
    VBOX_MAC=$(
        VBoxManage showvminfo "${name}" | grep "${net}" | \
        gsed -r 's/.*MAC: ([0-9A-F]*).*/\1/' | gsed -r 's/(.{2})/:\1/g' | \
        cut -b 2- | sed 's/0\([0-9A-Za-z]\)/\1/g'
    )
    echo $VBOX_MAC
    info "mac is $VBOX_MAC"
    VBOX_IP=$(
        arp -an | grep -i ${VBOX_MAC} | cut -d'(' -f2 | cut -d')' -f1
    )
    echo $VBOX_IP 
    if [ -z $VBOX_IP ]; then
        warn "failed to derive IP"
        return 1
    fi
    info "ip is $VBOX_IP"
    export VBOX_MAC=$VBOX_MAC
    export VBOX_IP=$VBOX_IP
}

find_vm () {
    name="$1"
    # provide the double quotes to ensure full string is matched against
    # the double-quoted output.
    VBoxManage list vms |grep "\"${name}\"" > /dev/null
}

check_vm_running () {
    name="$1"
    VBoxManage list runningvms |grep "\"${name}\"" > /dev/null
}

wait_vm_shutdown () {
    # wait for a vm to shutdown, default 10 seconds
    name="$1"
    timeout="${2:-10}"  # default 10 seconds timeout

    find_vm "${name}" || { warn_invalid_vm "${name}" && return 2; }
    for ((i=0; i <= $timeout; i++)) do
        # return success code 0 if no longer running
        check_vm_running "${name}" || return 0
        if [ $i -ne $timeout ]; then
            sleep 1
        fi
    done
    # still running, so this has failed.
    return 1
}

forcepoweroff_vm () {
    name="$1"
    timeout="$2"
    # try to trigger an acpi shutdown for a more graceful shutdown first
    VBoxManage controlvm "${name}" acpipowerbutton
    wait_vm_shutdown "${name}" "${timeout}" && return 0
    warn "'${name}' failed to shutdown; forcing poweroff"
    VBoxManage controlvm "${name}" poweroff
    return 1
}

source_vm_environ () {
    sourceconfigs base $@
    if [ ! $? -eq 0 ]; then
        return 1
    fi

    checkenv VBOX_NAME || return 1
    set_base_vm_environ
}

set_base_vm_environ () {
    export VBOX_NAME="${VBOX_NAME:-"${1}"}"
    export VBOX_HOME="${VBOX_ROOT}/${VBOX_NAME}"
    export VBOX_IMG="${VBOX_HOME}/${VBOX_NAME}.vhd"
    set_vm_common
}

set_vm_common () {
    export VBOX_PRIVKEY="${VBOX_HOME}/id_rsa"
    export VBOX_PUBKEY="${VBOX_HOME}/id_rsa.pub"
    # this is an assumption
    export VBOX_NET=vboxnet0
    export VBOX_KNOWN_HOSTS=${VBOX_ROOT}/known_hosts
    VBOX_SSH_FLAGS=(
        -oBatchMode=Yes
        -oUserKnownHostsFile="${VBOX_KNOWN_HOSTS}"
        -i "${VBOX_PRIVKEY}"
    )
}

update_host_keys () {
    touch "${VBOX_KNOWN_HOSTS}" 2>/dev/null
    if [ ! -f "${VBOX_KNOWN_HOSTS}" ]; then
        warn "known hosts file '${VBOX_KNOWN_HOSTS}' not found."
        return 1
    fi
    ssh-keygen -R "${VBOX_IP}" -f "${VBOX_KNOWN_HOSTS}" > /dev/null 2>&1
    ssh-keyscan -H "${VBOX_IP}" 2>/dev/null >> "${VBOX_KNOWN_HOSTS}"
}

find_vm_home () {
    vm_vars=$(VBoxManage showvminfo --machinereadable "${1}" 2>/dev/null)
    if [ ! $? -eq 0 ]; then
        return 1
    fi

    export CfgFile=$(
        echo "${vm_vars}" |grep CfgFile | cut -f2 -d= | \
        gsed -e 's/^"//' -e 's/"$//'
    )
    if [ -z "${CfgFile}" ]; then
        return 1
    fi

    export VBOX_NAME="${1}"
    export VBOX_HOME=$( dirname "${CfgFile}" )
    # assume first disk
    export VBOX_IMG=$(
        echo "${vm_vars}" |grep SATA-0-0 | cut -f2 -d= | \
        gsed -e 's/^"//' -e 's/"$//'
    )

    set_vm_common
}

activate_vm () {
    sourceconfigs base
    find_vm_home "${1}"
    set_vm_mac_ip "${VBOX_NAME}" "${VBOX_NET}"
}

create_vm () {
    source_vm_environ $@
    checkenvfile BOOT_ISO || return 1

    # verify that the vm and image does not already exists yet
    VBoxManage showvminfo "${VBOX_NAME}" 2>/dev/null >/dev/null
    if [ $? -eq 0 ]; then
        warn "'${VBOX_NAME}' is already registered as a vm"
        warn "(unregister with: VBoxManage unregistervm '${VBOX_NAME}')"
        return 1
    fi

    if [ -f "${VBOX_IMG}" ]; then
        warn "vm image at '${VBOX_IMG}' already exists"
        return 1
    fi

    # automatically create vboxnet0 if not exists
    VBoxManage list hostonlyifs |grep vboxnet0 2> /dev/null >/dev/null
    if [ $? -ne 0 ]; then
        VBoxManage hostonlyif create
    fi

    # find the existence of the target vboxnet, which may not be present
    # (this is the reason for sticking with default $VBOX_NET)
    VBoxManage list hostonlyifs |grep "${VBOX_NET}" 2> /dev/null >/dev/null
    if [ $? -ne 0 ]; then
        warn "hostonlyif ${VBOX_NET} does not exist"
        return 1
    fi

    export VBOX_HOST_IP=$(
        VBoxManage list hostonlyifs |grep "${VBOX_NET}" -A4 | \
        grep IPAddress| awk '{print $2}'
    )

    mkdir -p "${VBOX_ROOT}"
    VBoxManage createvm --name "${VBOX_NAME}" --basefolder "${VBOX_ROOT}" \
        --register
    VBoxManage modifyvm "${VBOX_NAME}" --ostype Gentoo_64 --memory=4096 \
        --cpus $VBOX_N_CPU --ioapic on \
        --nic1 hostonly --nic2 nat --cableconnected1 on --cableconnected2 on \
        --nictype1 82540EM --nictype2 82540EM \
        --hostonlyadapter1 "${VBOX_NET}"

    VBoxManage storagectl "${VBOX_NAME}" --name IDE --add ide \
        --controller PIIX4
    VBoxManage storagectl "${VBOX_NAME}" --name SATA --add sata \
        --controller IntelAhci --portcount 4

    VBoxManage createmedium disk --size $VBOX_DISK_SIZE --format VHD \
        --filename "${VBOX_IMG}"

    VBoxManage storageattach "${VBOX_NAME}" --storagectl IDE --port 0 \
        --device 0 --type dvddrive --medium "${BOOT_ISO}"
    VBoxManage storageattach "${VBOX_NAME}" --storagectl SATA --port 0 \
        --device 0 --type hdd --medium "${VBOX_IMG}"

    # generate ssh keys
    ssh-keygen -N '' -C "${VBOX_NAME}" -f "${VBOX_PRIVKEY}"
}

connect_vm () {
    if [ ! -f "${VBOX_PRIVKEY}" ]; then
        echo "credential at '${VBOX_PRIVKEY}' does not exist; aborting"
        return 1
    fi
    update_host_keys
    ssh "${VBOX_SSH_FLAGS[@]}" root@${VBOX_IP}
}

# consider moving the argparse* things to own module

argparser_common () {
    while [[ $# > 0 ]]; do
        opt="$1"
        case "${opt}" in
            -c|--config)
                __h="source next argument into the script for config values"
                source "$2"
                if [ $? -ne 0 ]; then
                    return 1
                fi
                shift
                shift
                ;;
            -n|--vbox-name)
                __h="set name of the VirtualBox machine; assign to VBOX_NAME"
                export VBOX_NAME="$2"
                shift
                shift
                ;;
            -V|--version)
                __h="show version information"
                echo "$(basename $0) 0.0.0"
                return 2
                shift
                ;;
            -v|--verbose)
                __h="verbose output"
                export VBOX_DEBUG=1
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
}

argparser_help () {
    while [[ $# > 0 ]]; do
        opt="$1"
        case "${opt}" in
            -h|--help)
                __h="show this help message"
                echo "usage: $(basename $0) ..."
                generate_help_text "help" ${ARGPARSERS}
                return 1
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
}

argparse () {
    for argparser in "help" ${ARGPARSERS}; do
        argparser_${argparser} "$@"
        if [ $? -ne 0 ]; then
            return 1
        fi
    done
}

generate_help_text () {
    for argparser in $*; do
        echo "$(type argparser_${argparser} | \
            grep -E "((-. \| )?--| __h=\")" | \
            gsed -re 's/ {8}(-.) \| (--[^\)]*)\)/\1, \2/' | \
            gsed -re 's/ {8}(--[^\)]*)\)/\1/' | \
            gsed -re 's/ {8}__h="(.*)";/\1/')" | envsubst
    done
}
