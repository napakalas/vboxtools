#!/usr/bin/env bash
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source $DIR/../lib/utils

prepare_gentoo_boot_iso_environment() {
    timeout=${GENTOO_POSTBOOT_TIMEOUT:-15}
    # hit enter a couple times
    # first to boot from the iso.
    sleep 5
    runscancode ""
    # then to select default keyboard layout.
    sleep 10
    runscancode ""

    echo "sleeping for ${timeout} seconds before working"
    sleep $timeout

    # get the guest to talk to the host to populate the arp table
    runscancode "ping -c1 $VBOX_HOST_IP"

    set_vm_mac_ip "${VBOX_NAME}" "${VBOX_NET}"
    if [ $? -ne 0 ]; then
        echo "cannot continue with automated installation"
        return 1
    fi

    runscancode "/etc/init.d/sshd start"
    runscancode "mkdir ~/.ssh"
    runscancode "echo $(cat "${VBOX_PUBKEY}") > ~/.ssh/authorized_keys"
    update_host_keys
}

download_gentoo_portage() {
    # download the latest portage snapshot
    # default up to 5 days old
    local age=${GENTOO_MAX_AGE:-5}
    # start always from yesterday, since this is how the snapshots are
    # typically dated.
    for ((day=1; day<=age; day++)); do
        local date=$(gdate -u +%Y%m%d --date="$day day ago")
        local url="${GENTOO_MIRROR}/snapshots/${GENTOO_PORTAGE_ID}-${date}.tar.xz"
        local target=$(basename ${url})
        wget -c -nv "${url}" && \
            wget -c -nv "${url}.gpgsig" && \
            eval "${1}='${target}'" && \
            return 0 || true  # keep going
    done

    warn "failed to download gentoo snapshot"
    return 1
}

_download_gentoo_release() {
    local retvar="${1}"
    local release="${2}"
    local release_path="${GENTOO_RELEASE_PATH:-"releases/amd64/autobuilds"}"
    local release_root="${GENTOO_MIRROR}/${release_path}"
    local latest_release_path="${release_root}/latest-${release}.txt"

    local blob_path=$(
        wget -q "${latest_release_path}" -O - | \
        grep "${release}" | \
        cut -f1 -d' '
    )

    if [ -z "$blob_path" ]; then
        warn "cannot find/download release '${2}'"
        return 1
    fi

    local url="${release_root}/${blob_path}"
    local target="$(basename "${url}")"
    info "downloading '${target}'"
    wget -c -nv "${url}"
    # also get the signed checksum file.
    wget -c -nv "${url}.DIGESTS.asc"
    eval "${1}='${target}'"
}

download_gentoo_stage3() {
    _download_gentoo_release "${1}" "${GENTOO_STAGE3_ID}"
}

download_gentoo_boot_iso() {
    _download_gentoo_release "${1}" "${GENTOO_BOOT_ISO_ID}"
}

locate_gentoo_part() {
    local bintype="${1^^}"
    local dl="GENTOO_DOWNLOAD_${bintype}"
    local id="GENTOO_${bintype}_ID"
    local var="GENTOO_${bintype}"
    local download_method="download_gentoo_${1}"
    local fileext="${2}"
    if [ -z ${!id} ]; then
        warn "${id} is not defined"
        exit 1
    fi

    if [ ${!dl} ]; then
        ${download_method} "GENTOO_${bintype}"
    else
        local files=(${!id}*${fileext})
        eval "${var}=${files[-1]}"
    fi;

    if [ ! -f ${!var} ]; then
        warn "failed to locate ${var}, defined as \"${!var}\""
        return 1
    fi
    info "${var} set as \"${!var}\""
}

locate_gentoo_archives() {
    locate_gentoo_part boot_iso .iso
    locate_gentoo_part stage3 .tar.xz
    locate_gentoo_part portage .tar.xz
}

verify_gentoo_archives () {
    gpg --verify "${GENTOO_PORTAGE}.gpgsig" "${GENTOO_PORTAGE}"
    gpg --verify "${GENTOO_STAGE3}.DIGESTS.asc"
    gpg --verify "${GENTOO_BOOT_ISO}.DIGESTS.asc"
    grep "$(sha512sum "${GENTOO_STAGE3}")" "${GENTOO_STAGE3}.DIGESTS.asc" >\
        /dev/null || die "checksum error for \"${GENTOO_STAGE3}\""
    grep "$(sha512sum "${GENTOO_BOOT_ISO}")" "${GENTOO_BOOT_ISO}.DIGESTS.asc" >\
        /dev/null || die "checksum error for \"${GENTOO_BOOT_ISO}\""
}

argparser_gentoo () {
    while [[ $# > 0 ]]; do
        opt="$1"
        case "${opt}" in
            -m|--mirror)
                __h="specify the Gentoo mirror (default <${GENTOO_MIRROR}>)"
                shift
                ;;
            -U|--update)
                __h="download/use the most up-to-date images and snapshots"
                GENTOO_DOWNLOAD_PORTAGE=1
                GENTOO_DOWNLOAD_STAGE3=1
                GENTOO_DOWNLOAD_BOOT_ISO=1
                shift
                ;;
            --skip-signature-check)
                __h="skip signature verification"
                _SKIP_GENTOO_VERIFY=1
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
}
